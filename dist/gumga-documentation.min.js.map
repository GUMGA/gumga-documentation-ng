{
  "version": 3,
  "sources": [
    "../node_modules/browser-pack/_prelude.js",
    "../src/documentation.js"
  ],
  "names": [
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "require",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "1",
    "module",
    "Documentation",
    "$interpolate",
    "$uibModal",
    "GumgaRest",
    "controller",
    "$scope",
    "$element",
    "$attrs",
    "ctrl",
    "this",
    "Service",
    "$parent",
    "apiUrl",
    "confirmButton",
    "confirmButtonClass",
    "defineModalTemplate",
    "modalTitle",
    "isEditable",
    "openModal",
    "_",
    "$uibModalInstance",
    "value",
    "APIURLService",
    "Title",
    "Key",
    "ConfirmButton",
    "ConfirmButtonClass",
    "message",
    "title",
    "close",
    "model",
    "extend",
    "key",
    "then",
    "$broadcast",
    "template",
    "canEdit",
    "backdrop",
    "resolve",
    "data",
    "$inject",
    "open",
    "controllerAs",
    "size",
    "restrict",
    "scope",
    "bindToController",
    "angular",
    "directive"
  ],
  "mappings": "CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,SAAAC,UAAA,YAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,GAAAL,SAAAD,UAAA,YAAAA,OAAA,KAAA,GAAAH,GAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,MAAAa,GAAA,SAAAT,QAAAU,OAAAJ,uBCAA,WAAA,QAIEK,eAAAC,aAAAC,UAAAC,WAAA,QAIEC,YAAAC,OAAAC,SAAAC,QAAA,GACQC,MAANC,KAEMC,SADsBL,OAA5BM,QAC4B,GAAAR,WAAcK,KAA1CI,SACMC,cAAsBN,OAAAM,cAA4BN,OAA5BM,cAA5B,YACMC,mBAAsBP,OAAAO,mBAA4BP,OAA5BO,mBAA5B,kBAGMC,qBAFsBR,OAAAS,YAA4BT,OAA5BS,WAEA,QAAtBD,qBAAAE,YAAA,GACJA,WAAA,MAeC,2kBAAA,OASF,gNAAAT,MAEDU,UAAiB,SAAAC,GAAA,QAiBbf,YAAAgB,kBAAAC,MAAAC,cAAAC,MAAAlB,OAAAmB,IAAAC,cAAAC,oBAAA,GACQlB,MAANC,IAAAD,MAEAmB,QAA0BN,MAA1BA,MAAAb,KACAoB,MAAAL,MAAAf,KACAK,cAAAY,cAAAjB,KACAM,mBAAAY,mBAAAlB,KAEAqB,MAAc,SAAAC,OAAApB,QACZqB,OAAA,OAAA,IAA2BC,IAAFR,IAAYH,MAArCS,QAAAG,KAEI,SAAAd,GAAA,MAAKC,mBAALS,SACA,SAAAV,GAAA,MAAKd,QAAA6B,WAAL,iBAAA,GA3BJC,UAAgBpB,oBAAoBP,KAA1C4B,SAEMC,UAAgB7B,KAAA4B,SAAA,SAEhBE,SAAUjB,MAAA,QAAAA,SAAA,MAAAX,SACeqB,OAAA,MAAA,IAAyBvB,KAAzBwB,KAAAC,KAA0C,SAAAM,MAAA,MAAQA,MAARA,QADzDjB,cAAA,QAAAA,iBAAA,MAEQZ,UAFRa,MAAA,QAAAA,SAAA,MAGef,MAAPQ,YAHRQ,IAAA,QAAAA,OAAA,MAIehB,MAAPwB,KAJRP,cAAA,QAAAA,iBAAA,MAKQZ,gBALRa,mBAAA,QAAAA,sBAAA,MAMQZ,qBAAAV,YAGtBoC,SAAqB,oBAAA,QAAA,gBAAA,QAAA,SAAA,MAAA,gBAArB,sBAAAtC,UAoBFuC,MAAiBN,SAAFA,SAAYG,QAAZA,QAAqBlC,WAArBA,WAAiCsC,aAhChD,OAgC8DL,SAA/CA,SAAyDM,KA9BxE,QAAA,MAAAvC,YA1CJoC,SAAoB,SAAA,WAApB,WAAAI,SA4EO,IAAAC,OAAAT,QAEE,IAAAJ,IAAA,IAAApB,OAAA,IAAAI,WAFF,MAAA8B,kBAAA,EAAAJ,aAAA,OAAAtC,WAAAA,WAAA+B,SAAP,+JAAAnC,cAhFFwC,SAAwB,eAAA,YAAxB,aAAAO,QAoGAhD,OAAA,0BAAAiD,UAAA,qBAAAhD",
  "file": "gumga-documentation.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "(function(){\n\n  Documentation.$inject = ['$interpolate', '$uibModal', 'GumgaRest']\n\n  function Documentation($interpolate, $uibModal, GumgaRest){\n\n    controller.$inject =['$scope', '$element', '$attrs']\n\n    function controller($scope, $element, $attrs) {\n      const ctrl                = this\n      const parentScope         = $scope.$parent\n      const Service             = new GumgaRest(ctrl.apiUrl)\n      const confirmButton       = $attrs.confirmButton      ? $attrs.confirmButton      : 'Confirmar'\n      const confirmButtonClass  = $attrs.confirmButtonClass ? $attrs.confirmButtonClass : 'btn btn-primary'\n      const modalTitle          = $attrs.modalTitle         ? $attrs.modalTitle         : 'Documentação'\n\n      const defineModalTemplate = isEditable => {\n        if (isEditable) {\n          return `\n          <div class=\"modal-header\">\n            <h4>{{ ::ctrl.title }}</h4>\n          </div>\n          <div class=\"modal-body\">\n            <form novalidate>\n\n              <textarea  class=\"form-control\" style=\"width: 100%; resize: none;\" ng-model=\"ctrl.message\" ng-blur=\"ctrl.afterEditing(ctrl.message)\">\n              </textarea>\n            </form>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"{{ ::ctrl.confirmButtonClass }}\" ng-click=\"ctrl.close(ctrl.message)\"> {{ ::ctrl.confirmButton }}</button>\n          </div>`\n        }\n        return `\n          <div class=\"modal-header\">\n            <h4>{{ ::ctrl.title }}</h4>\n          </div>\n          <div class=\"modal-body\">\n            <p>{{ ::ctrl.message }}</p>\n          </div>\n          `\n      }\n\n      ctrl.openModal = _ => {\n\n        const template      = defineModalTemplate(ctrl.canEdit)\n        const controllerAs  = 'ctrl'\n        const backdrop      = ctrl.canEdit ? 'static' : true\n        const size          = 'sm'\n        const resolve = {\n          value()             { return Service.extend('GET',`/${ctrl.key}`).then(data => data.data) },\n          APIURLService()     { return Service },\n          Title()             { return ctrl.modalTitle },\n          Key()               { return ctrl.key },\n          ConfirmButton()     { return confirmButton },\n          ConfirmButtonClass(){ return confirmButtonClass }\n        }\n\n          controller.$inject = ['$uibModalInstance', 'value', 'APIURLService', 'Title', '$scope', 'Key', 'ConfirmButton', 'ConfirmButtonClass']\n\n          function controller($uibModalInstance, value, APIURLService, Title, $scope, Key,  ConfirmButton, ConfirmButtonClass){\n            const ctrl        = this\n\n            ctrl.message            = value.value\n            ctrl.title              = Title\n            ctrl.confirmButton      = ConfirmButton\n            ctrl.confirmButtonClass = ConfirmButtonClass\n\n            ctrl.close  = model => {\n              Service.extend('POST','',{ key: Key, value: model })\n                .then(\n                  _ => $uibModalInstance.close(),\n                  _ => $scope.$broadcast(`postFailed`),\n                )\n            }\n\n          }\n\n        $uibModal.open({ template, resolve, controller, controllerAs, backdrop, size })\n      }\n    }\n\n    return {\n      restrict: 'E',\n      scope: {\n        canEdit:    '=',\n        key:        '@',\n        apiUrl:     '@',\n        modalTitle: '@?'\n      },\n      bindToController: true,\n      controllerAs: 'ctrl',\n      controller,\n      template: `\n      <a ng-click=\"ctrl.openModal()\">\n        <span class=\"glyphicon glyphicon-info-sign gumga-documentation-info\">\n        </span>\n      </a>\n      `\n    }\n  }\n\n  angular.module('gumga.documentation', [])\n    .directive('gumgaDocumentation', Documentation)\n})()\n"
  ]
}