{
  "version": 3,
  "sources": [
    "../node_modules/browser-pack/_prelude.js",
    "../src/documentation.js"
  ],
  "names": [],
  "mappings": "AAAA;cCAA,mBAIE,eAAA,aAAA,UAAA,mBAIE,YAAA,OAAA,SAAA,WACQ,MAAN,KAEM,SADsB,OAA5B,QAC4B,GAAA,WAAc,KAA1C,SACM,cAAsB,OAAA,cAA4B,OAA5B,cAA5B,YACM,mBAAsB,OAAA,mBAA4B,OAA5B,mBAA5B,kBAGM,qBAFsB,OAAA,YAA4B,OAA5B,WAEA,QAAtB,qBAAA,eACJ,iBAeC,klBASF,sNAED,UAAiB,SAAA,WAiBb,YAAA,kBAAA,MAAA,cAAA,MAAA,OAAA,IAAA,cAAA,uBACQ,MAAN,UAEA,QAA0B,MAA1B,WACA,MAAA,WACA,cAAA,mBACA,mBAAA,wBAEA,MAAc,SAAA,eACZ,OAAA,OAAA,IAA2B,IAAF,IAAY,MAArC,QAAA,KAEI,SAAA,SAAK,mBAAL,SACA,SAAA,SAAK,QAAA,WAAL,oBA3BJ,UAAgB,oBAAoB,KAA1C,SAEM,UAAgB,KAAA,SAAA,SAEhB,SAAU,MAAA,QAAA,wBACe,OAAA,MAAA,IAAyB,KAAzB,KAAA,KAA0C,SAAA,YAAQ,MAAR,QADzD,cAAA,QAAA,uBAEQ,UAFR,MAAA,QAAA,eAGe,MAAP,YAHR,IAAA,QAAA,aAIe,MAAP,KAJR,cAAA,QAAA,uBAKQ,gBALR,mBAAA,QAAA,4BAMQ,iCAGtB,SAAqB,oBAAA,QAAA,gBAAA,QAAA,SAAA,MAAA,gBAArB,gCAoBF,MAAiB,SAAF,SAAY,QAAZ,QAAqB,WAArB,WAAiC,aAhChD,OAgC8D,SAA/C,SAAyD,KA9BxE,0BA1CJ,SAAoB,SAAA,WAApB,oBA4EO,mBAEE,QAAA,WAAA,eAFF,wBAAA,eAAA,kBAAA,oBAAP,6KAhFF,SAAwB,eAAA,YAAxB,qBAoGA,OAAA,0BAAA,UAAA,qBAAA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "(function(){\n\n  Documentation.$inject = ['$interpolate', '$uibModal', 'GumgaRest']\n\n  function Documentation($interpolate, $uibModal, GumgaRest){\n\n    controller.$inject =['$scope', '$element', '$attrs']\n\n    function controller($scope, $element, $attrs) {\n      const ctrl                = this\n      const parentScope         = $scope.$parent\n      const Service             = new GumgaRest(ctrl.apiUrl)\n      const confirmButton       = $attrs.confirmButton      ? $attrs.confirmButton      : 'Confirmar'\n      const confirmButtonClass  = $attrs.confirmButtonClass ? $attrs.confirmButtonClass : 'btn btn-primary'\n      const modalTitle          = $attrs.modalTitle         ? $attrs.modalTitle         : 'Documentação'\n\n      const defineModalTemplate = isEditable => {\n        if (isEditable) {\n          return `\n          <div class=\"modal-header\">\n            <h4>{{ ::ctrl.title }}</h4>\n          </div>\n          <div class=\"modal-body\">\n            <form novalidate>\n\n              <textarea  class=\"form-control\" style=\"width: 100%; resize: none;\" ng-model=\"ctrl.message\" ng-blur=\"ctrl.afterEditing(ctrl.message)\">\n              </textarea>\n            </form>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"{{ ::ctrl.confirmButtonClass }}\" ng-click=\"ctrl.close(ctrl.message)\"> {{ ::ctrl.confirmButton }}</button>\n          </div>`\n        }\n        return `\n          <div class=\"modal-header\">\n            <h4>{{ ::ctrl.title }}</h4>\n          </div>\n          <div class=\"modal-body\">\n            <p>{{ ::ctrl.message }}</p>\n          </div>\n          `\n      }\n\n      ctrl.openModal = _ => {\n\n        const template      = defineModalTemplate(ctrl.canEdit)\n        const controllerAs  = 'ctrl'\n        const backdrop      = ctrl.canEdit ? 'static' : true\n        const size          = 'sm'\n        const resolve = {\n          value()             { return Service.extend('GET',`/${ctrl.key}`).then(data => data.data) },\n          APIURLService()     { return Service },\n          Title()             { return ctrl.modalTitle },\n          Key()               { return ctrl.key },\n          ConfirmButton()     { return confirmButton },\n          ConfirmButtonClass(){ return confirmButtonClass }\n        }\n\n          controller.$inject = ['$uibModalInstance', 'value', 'APIURLService', 'Title', '$scope', 'Key', 'ConfirmButton', 'ConfirmButtonClass']\n\n          function controller($uibModalInstance, value, APIURLService, Title, $scope, Key,  ConfirmButton, ConfirmButtonClass){\n            const ctrl        = this\n\n            ctrl.message            = value.value\n            ctrl.title              = Title\n            ctrl.confirmButton      = ConfirmButton\n            ctrl.confirmButtonClass = ConfirmButtonClass\n\n            ctrl.close  = model => {\n              Service.extend('POST','',{ key: Key, value: model })\n                .then(\n                  _ => $uibModalInstance.close(),\n                  _ => $scope.$broadcast(`postFailed`),\n                )\n            }\n\n          }\n\n        $uibModal.open({ template, resolve, controller, controllerAs, backdrop, size })\n      }\n    }\n\n    return {\n      restrict: 'E',\n      scope: {\n        canEdit:    '=',\n        key:        '@',\n        apiUrl:     '@',\n        modalTitle: '@?'\n      },\n      bindToController: true,\n      controllerAs: 'ctrl',\n      controller,\n      template: `\n      <a ng-click=\"ctrl.openModal()\">\n        <span class=\"glyphicon glyphicon-info-sign gumga-documentation-info\">\n        </span>\n      </a>\n      `\n    }\n  }\n\n  angular.module('gumga.documentation', [])\n    .directive('gumgaDocumentation', Documentation)\n})()\n"
  ]
}